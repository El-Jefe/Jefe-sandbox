/*
* This is a template implementation file for a user module derived from
* DefaultGUIModel with a custom GUI.
*/

#include <histogram.h>
#include <main_window.h>
#include <iostream>
#include <QtGui>

extern "C" Plugin::Object *createRTXIPlugin(void){
	return new PluginTemplate();
}

static DefaultGUIModel::variable_t vars[] = {
	{ "GUI label", "Tooltip description", DefaultGUIModel::PARAMETER
		| DefaultGUIModel::DOUBLE, },
	{ "Bin Size", "Bin", DefaultGUIModel::PARAMETER
		| DefaultGUIModel::DOUBLE, },
	{ "Threshold", "Threshold", DefaultGUIModel::Parameter
		| DefaultGUIModel::Double, },
	{ "Fire Rate", "Rate", DefaultGUIModel:: STATE, },
	{ "A State", "Tooltip description", DefaultGUIModel::STATE, }, 
};

static size_t num_vars = sizeof(vars) / sizeof(DefaultGUIModel::variable_t);

PluginTemplate::PluginTemplate(void) : DefaultGUIModel("PluginTemplate with Custom GUI", ::vars, ::num_vars) {
	setWhatsThis("<p><b>PluginTemplate:</b><br>QWhatsThis description.</p>");
	DefaultGUIModel::createGUI(vars, num_vars); // this is required to create the GUI
	customizeGUI();
	update( INIT ); // this is optional, you may place initialization code directly into the constructor
	refresh(); // this is required to update the GUI with parameter and state values
}

PluginTemplate::~PluginTemplate(void) { }

void PluginTemplate::execute(void) {
	bin_size = getParameter("Bin Size").toDouble();//User inputs bin size in seconds
	int array [bin_size] = {}; // Create the array
	int number = 0;//Starting point of the scan through the .wav file (entire file is diveded into chunks of length "bin size") and each is analyzed one by one
	int window = 1;//used to scan through each chunk of size "bin size"
	int spk = 0;//spike counter


//Sequence to open .wav file
FILE *fp;
fp = fopen("TestSpike@FPdata-1min.wav","rb);
if(fp)
{
B id[4];//four bytes hold 'RIFF'
F size; // file size

freat(id,sizeof(B),4,fp)//read first 4 bytes
if(!strcmp(id,"RIFF"))//make sure first 4 bytes are 'RIFF'
{
fread(size,sizeof(F),1,fp);
fread(id,sizeof(B),4,fp);
if(!strcmp(id,"WAVE"))
	{
	fread(id,sizeof(B),4,fp);
	fread(format_length, sizeof(F),1,fp);
	fread(format_tag,sizeof(short),1,fp);
	fread(channels,sizeof(short),1,fp);
	fread(sample_rate,sizeof(F),1,fp);
	fread(bits_per_sample,sizeof(short),1,fp);
	fread(id, sizeof(B),4,fp);
	fread(&data_size,sizeof(F),1,fp);//number of bytes of data
	}
else
printf("Not a valid file /n")
else
printf("Not a valid file /n")
}
}

//once the data file has been opened, it can be processed


	while number<=bin_size; //This section is not intended to be syntaxed correctly at this point but serves to illustrate the thought process
		if number<bin_size;
			if myfile(window) > threshold; //Place holder while I figure out how to determine when spikes happen
//Yogi, I am reading up on what exactly the computer "sees" in a .wav file, because this will help me determine how to classify the number of spikes that cross the user-inputted threshold. This is the main thing holding me back at this point.
				spk += 1; //counts number of spikes in that second
				array[number] = spk; //fire rate for that particular window of time (seconds)
				number += 1;
			else
				number = number;
		else
			if myfile(window) > threshold;
			spk += 1;
			array[number] = spk/bin;
			number += 1;
			window += 1;
			//The intention is to have a sliding window that calculates first the number of spikes in "bin" seconds, then the firing rate for that particular bin of time, which is then stored in "array." I am aware that this is far from the correct syntax, I am just trying to think the problem through before I worry about coding it correctly

//plot array as a value in a histogram					
	return;
	number = 0;
}

void PluginTemplate::update(DefaultGUIModel::update_flags_t flag) {
	switch (flag) {
		case INIT:
			period = RT::System::getInstance()->getPeriod() * 1e-6; // ms
			setParameter("GUI label", some_parameter);
			setState("A State", some_state);
			break;
	
		case MODIFY:
			some_parameter = getParameter("GUI label").toDouble();
			break;

		case UNPAUSE:
			break;

		case PAUSE:
			break;

		case PERIOD:
			period = RT::System::getInstance()->getPeriod() * 1e-6; // ms
			break;
	
		default:
			break;
	}
}

void PluginTemplate::customizeGUI(void) {
	QGridLayout *customlayout = DefaultGUIModel::getLayout();
	
	QGroupBox *button_group = new QGroupBox;
	
	QPushButton *abutton = new QPushButton("Button A");
	QPushButton *bbutton = new QPushButton("Button B");
	QHBoxLayout *button_layout = new QHBoxLayout;
	button_group->setLayout(button_layout);
	button_layout->addWidget(abutton);
	button_layout->addWidget(bbutton);
	QObject::connect(abutton, SIGNAL(clicked()), this, SLOT(aBttn_event()));
	QObject::connect(bbutton, SIGNAL(clicked()), this, SLOT(bBttn_event()));
	
	customlayout->addWidget(button_group, 0,0);
	setLayout(customlayout);
}

// functions designated as Qt slots are implemented as regular C++ functions
void PluginTemplate::aBttn_event(void) { }

void PluginTemplate::bBttn_event(void) { }
